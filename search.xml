<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Csharp</title>
    <url>/2023/04/15/Csharp/</url>
    <content><![CDATA[<h1 id="C-Get-started"><a href="#C-Get-started" class="headerlink" title="C# Get started"></a>C# Get started</h1><p>hello guys, follow me and let’s studying the C#.</p>
<h2 id="Chapter1-Basic"><a href="#Chapter1-Basic" class="headerlink" title="Chapter1: Basic"></a>Chapter1: Basic</h2><ul>
<li><strong>using</strong>: The keyword is used to include the <strong>System</strong> namespace in the program. A program usually has multiple using <strong>statements</strong>.</li>
<li><strong>namespace</strong>: which contains different classes.</li>
<li><strong>class</strong>: declariation of the class.</li>
<li><strong>Main</strong>: Is the entry point for all C# programs. What does the class do when executed</li>
<li><strong>Formatted</strong> <strong>output aka interpolation</strong>：Console.WriteLine(<strong>$</strong>“Hello World! The counter is <strong>{counter}</strong>“); By using $ dollar symbol.</li>
</ul>
<hr>
<p><strong>Here are a few things to note:</strong></p>
<ul>
<li>C# is case sensitive.</li>
<li>All statements and expressions must start with a semicolon (;). The end.</li>
<li>Execution of the program starts with the Main method.</li>
<li>Unlike Java, the file name can be different from the name of the class.</li>
</ul>
<p><strong>Numbers and Math in C#: Int,float,double,decimal,string..</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> minVal = <span class="built_in">int</span>.MinValue; <span class="comment">// -2147483648</span></span><br><span class="line"><span class="built_in">int</span> maxVal = <span class="built_in">int</span>.MaxValue; <span class="comment">// 2147483647</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> min = <span class="built_in">double</span>.MinValue <span class="comment">// -1.79769313486232E+308</span></span><br><span class="line"><span class="built_in">double</span> max = <span class="built_in">double</span>.MaxValue <span class="comment">// 1.79769313486232E+308</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">decimal</span> min = <span class="built_in">decimal</span>.MinValue; <span class="comment">//-79228162514264337593543950335</span></span><br><span class="line"><span class="built_in">decimal</span> max = <span class="built_in">decimal</span>.MaxValue; <span class="comment">// 79228162514264337593543950335</span></span><br></pre></td></tr></table></figure>

<p>The <code>decimal</code> type has a smaller range but greater precision than <code>double</code>. </p>
<p>The <code>M</code> suffix on the numbers is how you indicate that a constant should use the <code>decimal</code> type. For example:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">decimal</span> c = <span class="number">1.0</span>M;</span><br><span class="line"><span class="built_in">decimal</span> d = <span class="number">3.0</span>M;</span><br><span class="line">Console.WriteLine(c / d);</span><br></pre></td></tr></table></figure>

<p><strong>Arrays</strong>:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个整型数组，长度为3</span></span><br><span class="line"><span class="built_in">int</span>[] nums = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个字符串数组，长度为4，初始化数组元素</span></span><br><span class="line"><span class="built_in">string</span>[] names = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 var 关键字定义数组</span></span><br><span class="line"><span class="keyword">var</span> scores = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">90</span>, <span class="number">80</span>, <span class="number">95</span>, <span class="number">85</span>, <span class="number">70</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上示例中，第一个定义创建了一个长度为 3 的整型数组，数组中的元素初始值为 0；第二个定义创建了一个长度为 4 的字符串数组，并初始化了每个元素的值；第三个定义使用 var 关键字根据初始化值推断出数组的类型，并创建了一个长度为 5 的整型数组</p>
<p>　<strong>Common Math function</strong></p>
<ul>
<li>Math.Abs: Returns the absolute value of a number.</li>
<li>Math.Ceiling: Rounds up a number and returns the smallest integer greater than or equal to that number.</li>
<li>Math.Floor: Rounds down a number and returns the largest integer less than or equal to the number.</li>
<li>Math.Max: Returns the maximum of two numbers.</li>
<li>Math.Min: Returns the minimum of two numbers.</li>
<li>Math.Pow: Returns the specified power of a number.</li>
<li>Math.Round: Round to the nearest whole number or number of specified decimal places.</li>
<li>Math.Sqrt: Returns the square root of a number.</li>
<li>Math.Log: Returns the natural log base e of a number.</li>
<li>Math.Exp: Returns e to the specified power.</li>
<li>Math.Truncate: Truncates a number into its integer part.</li>
</ul>
<h2 id="Chapter2-if-x2F-else-x2F-loop"><a href="#Chapter2-if-x2F-else-x2F-loop" class="headerlink" title="Chapter2. if&#x2F;else&#x2F;loop"></a>Chapter2. if&#x2F;else&#x2F;loop</h2><h3 id="1-if-statement"><a href="#1-if-statement" class="headerlink" title="1. if statement"></a>1. if statement</h3><p><strong>bool</strong> carries true and false. which is different from java</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">execution <span class="keyword">when</span> condition <span class="keyword">is</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">execution <span class="keyword">when</span> condition <span class="keyword">is</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Logical AND Operator:<strong>&amp;&amp;</strong> </p>
<p>Logical OR Operator:<strong>||</strong> </p>
<p>Logical NOT Operator: <strong>!</strong></p>
<p>Equality Operator: <strong>&#x3D;&#x3D;</strong></p>
<h3 id="2-loop"><a href="#2-loop" class="headerlink" title="2. loop"></a>2. loop</h3><ol>
<li><p><strong>while loop</strong></p>
<p>same with java</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (counter &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;Hello World! The counter is <span class="subst">&#123;counter&#125;</span>&quot;</span>);</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>do while</strong></p>
<p>same with java</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;Hello World! The counter is <span class="subst">&#123;counter&#125;</span>&quot;</span>);</span><br><span class="line">  counter++;</span><br><span class="line">&#125; <span class="keyword">while</span> (counter &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>for loop</strong></p>
</li>
</ol>
<p>​	Same with java</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> counter = <span class="number">0</span>; counter &lt; <span class="number">10</span>; counter++)</span><br><span class="line">&#123;</span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;Hello World! The counter is <span class="subst">&#123;counter&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>(for initializer;for condition;for iterator)</strong> same with java</p>
<p><strong>Nested for loop</strong> which can be used to create matrix, e.g:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> row = <span class="number">1</span>; row &lt; <span class="number">11</span>; row++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">char</span> column = <span class="string">&#x27;a&#x27;</span>; column &lt; <span class="string">&#x27;k&#x27;</span>; column++)</span><br><span class="line">  &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;The cell is (<span class="subst">&#123;row&#125;</span>, <span class="subst">&#123;column&#125;</span>)&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Chapter3-Lists-collection"><a href="#Chapter3-Lists-collection" class="headerlink" title="Chapter3. Lists collection"></a>Chapter3. Lists collection</h2><p>Example:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;Joshua&quot;</span>, <span class="string">&quot;Ana&quot;</span>, <span class="string">&quot;Felipe&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> names)</span><br><span class="line">&#123;</span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;Hello <span class="subst">&#123;name.ToUpper()&#125;</span>!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>You specify the type of the elements between the angle brackets, &lt;&gt;.</li>
<li>One important aspect of this <a href="https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1">List</a> type is that it can grow or shrink, enabling you to add or remove elements.</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;Joshua&quot;</span>, <span class="string">&quot;Ana&quot;</span>, <span class="string">&quot;Felipe&quot;</span> &#125;;</span><br><span class="line">Console.WriteLine();</span><br><span class="line">names.Add(<span class="string">&quot;Joshua&quot;</span>);</span><br><span class="line">names.Add(<span class="string">&quot;Bill&quot;</span>);</span><br><span class="line">names.RemoveAll(name=&gt;name==<span class="string">&quot;Joshua&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> names)</span><br><span class="line">&#123;</span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;Hello <span class="subst">&#123;name.ToUpper()&#125;</span>!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RemoveAll method is different from that in Java. It is provided by list<T></T></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">RemoveAll</span>(<span class="params">Predicate&lt;T&gt; match</span>)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>list<T> allows you reference the individual items by <strong>index</strong> directly which is different from java&#x3D;&gt;”list.get()”.</T></p>
</li>
<li><p>list<T> also provides <strong>Count</strong> method which allows you to count the numbers of elements in the list. <strong>xxx.Count</strong></T></p>
</li>
<li><p>list<T> provides you a IndexOf method which allows you to find the index of the specific element.</T></p>
</li>
<li><p>The items in your list can be sorted as well. The <a href="https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.sort">Sort</a> method sorts all the items in the list in their normal order (alphabetically for strings). Add this code and run again: Quite similar with the Collection.sort();</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//print fibonacci numbers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fibonacciNumbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fibonacciNumbers.Count &lt; <span class="number">20</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> previous = fibonacciNumbers[fibonacciNumbers.Count - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> previous2 = fibonacciNumbers[fibonacciNumbers.Count - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    fibonacciNumbers.Add(previous + previous2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> fibonacciNumbers)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>First blog</title>
    <url>/2023/02/12/First-blog/</url>
    <content><![CDATA[<h1 id="Git-study"><a href="#Git-study" class="headerlink" title="Git study"></a>Git study</h1><p><img src="/../images/WeChatb22903d041669c31bc759fe2fce96683.png"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>java studying</title>
    <url>/2023/04/01/java/</url>
    <content><![CDATA[<ol>
<li><h1 id="language"><a href="#language" class="headerlink" title="language"></a>language</h1></li>
</ol>
<h3 id="1-Comparable-vs-comparator"><a href="#1-Comparable-vs-comparator" class="headerlink" title="(1).Comparable vs comparator"></a>(1).Comparable vs comparator</h3><ul>
<li><h4 id="第一，字面含义不同"><a href="#第一，字面含义不同" class="headerlink" title="第一，字面含义不同"></a>第一，字面含义不同</h4></li>
</ul>
<p>我们先从二者的字面含义来理解它，Comparable翻译为中文是“比较”的意思，而Comparator是“比较器”的意思。Comparable是以-able结尾的，表示它自身具备着某种能力，而Comparator是以-or结尾，表示自身是比较的参与者，这是从字面含义先来理解二者的不同。</p>
<ul>
<li><h4 id="第二，用法不同"><a href="#第二，用法不同" class="headerlink" title="第二，用法不同"></a>第二，用法不同</h4></li>
</ul>
<p>二者都是顶级的接口，但拥有的方法和用法是不同的，下面我们分别来看。</p>
<h3 id="Comparable用法"><a href="#Comparable用法" class="headerlink" title="Comparable用法"></a>Comparable用法</h3><p>Comparable接口只有一个方法compareTo，实现Comparable接口并重写compareTo方法就可以实现某个类的排序了，它支持Collections.sort和Arrays.sort的排序。 </p>
<p>在我们没有使用Comparable时，程序的执行是这样的</p>
<p><img src="/../images/v2-227ef5bbf20b532f1bb342573b7ebef5_1440w.png" alt="v2-227ef5bbf20b532f1bb342573b7ebef5_1440w"></p>
<p><img src="/../images/v2-6c8292dea0e393ceffffabc72cdae6e3_1440w.png" alt="v2-6c8292dea0e393ceffffabc72cdae6e3_1440w"></p>
<p>从上图可以看出，当自定义类Person没有实现Comparable时，List集合是没有排序的，只能以元素的插入顺序作为输出的顺序。 </p>
<p>然而这个时候，老板有一个需求：需要根据Person对象的年龄age属性进行倒序，也就是根据age属性从大到小进行排序，这个时候就可以请出，我们本文的主角：Comparable出场了。 </p>
<p>Comparable的使用是在自定义对象的类中实现Comparable接口，并重写compareTo方法来实现自定义排序规则的，具体实现代码如下：</p>
<p><img src="/../images/v2-1cbf6d14a01aa2489f5a8a5a3e80b4d2_1440w.png" alt="v2-1cbf6d14a01aa2489f5a8a5a3e80b4d2_1440w"></p>
<p>程序的执行结果如下图所示：</p>
<p><img src="/../images/v2-724747d21c4f51c7b37ab98df34f5db7_1440w.png" alt="v2-724747d21c4f51c7b37ab98df34f5db7_1440w"></p>
<h4 id="compareTo排序方法说明"><a href="#compareTo排序方法说明" class="headerlink" title="compareTo排序方法说明"></a>compareTo排序方法说明</h4><p>compareTo方法接收的参数p是要对比的对象，排序规则是用当前对象和要对比的对象进行比较，然后返回一个int类型的值。正序从小到大的排序规则是：使用当前的对象值减去要对比对象的值；而倒序从大到小的排序规则刚好相反：是用对比对象的值减去当前对象的值。 </p>
<p>注意事项：如果自定义对象没有实现Comparable接口，那么它是不能使用Collections.sort方法进行排序的</p>
<h3 id="Comparator用法"><a href="#Comparator用法" class="headerlink" title="Comparator用法"></a>Comparator用法</h3><p>Comparator和Comparable的排序方法是不同的，Comparable排序的方法是compareTo，而Comparator排序的方法是compare，具体实现代码如下：</p>
<p><img src="/../images/v2-f742089317861a254770a57c2a41f0ee_1440w.png" alt="v2-f742089317861a254770a57c2a41f0ee_1440w"></p>
<p>程序的执行结果如下图所示：</p>
<p><img src="/../images/v2-dd7e3161f5eb2d2055f73a9796cf81ff_1440w.png" alt="v2-dd7e3161f5eb2d2055f73a9796cf81ff_1440w"></p>
<p>匿名类:</p>
<p><img src="/../images/v2-53099add8da4513a445681f7f835d05a_1440w.png" alt="v2-53099add8da4513a445681f7f835d05a_1440w"></p>
<h2 id="第三，使用场景不同"><a href="#第三，使用场景不同" class="headerlink" title="第三，使用场景不同"></a>第三，使用场景不同</h2><p>通过上面示例的实现代码我们可以看出，使用Comparable必须要修改原有的类，也就是你要排序那个类，就要在那个中实现Comparable接口并重写compareTo方法，所以Comparable更像是“对内”进行排序的接口。 </p>
<p>而Comparator的使用则不相同，Comparator无需修改原有类。也就是在最极端情况下，即使Person类是第三方提供的，我们依然可以通过创建新的自定义比较器Comparator，来实现对第三方类Person的排序功能。也就是说通过Comparator接口可以实现和原有类的解耦，在不修改原有类的情况下实现排序功能，所以Comparator可以看作是“对外”提供排序的接口。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Comparable和Comparator都是用来实现元素排序的，它们二者的区别如下：</p>
<ul>
<li>Comparable是“比较”的意思，而Comparator是“比较器”的意思；</li>
<li>Comparable是通过重写compareTo方法实现排序的，而Comparator是通过重写compare方法实现排序的；</li>
<li>Comparable必须由自定义类内部实现排序方法，而Comparator是外部定义并实现排序的。</li>
</ul>
<p>所以用一句话总结二者的区别：Comparable可以看作是“对内”进行排序接口，而Comparator是“对外”进行排序的接口。</p>
<h3 id="2-List-list-x3D-new-ArrayList-lt-gt"><a href="#2-List-list-x3D-new-ArrayList-lt-gt" class="headerlink" title="(2).List list &#x3D; new ArrayList&lt;&gt;();"></a>(2).List<Integer> list &#x3D; new ArrayList&lt;&gt;();</Integer></h3><p>在Java中，List是一种接口类型，它定义了一组用于操作列表（List）数据结构的方法。ArrayList是List接口的一个实现类，它使用数组来实现List接口中定义的方法。在这里，使用List<Integer> list &#x3D; new ArrayList&lt;&gt;();这样的语法是因为：</Integer></p>
<ol>
<li>泛型：List<Integer>中的Integer表示这个List只能存储Integer类型的元素。这是Java泛型的一种应用，它可以在编译时检查类型错误，避免在运行时出现类型不匹配的错误。</Integer></li>
<li>多态性：使用List接口作为类型声明，而不是具体的ArrayList类，可以让代码更具有可扩展性。这样，如果需要更改实现方式，只需要更改赋值右侧的实现类，而不需要更改其余代码。</li>
<li>简洁性：使用diamond运算符（&lt;&gt;）可以让代码更简洁。在Java 7之前，需要写成List<Integer> list &#x3D; new ArrayList<Integer>();这样的形式。</Integer></Integer></li>
</ol>
<h3 id="Collection-sort"><a href="#Collection-sort" class="headerlink" title="Collection.sort()"></a>Collection.sort()</h3><p>如果要给自定义泛型的集合排序，需要确保该泛型类实现了 <code>Comparable</code> 接口，并重写 <code>compareTo</code> 方法。 <code>compareTo</code> 方法用于比较两个对象的大小关系，以便于排序。<strong>或者</strong>通过实现<code>Comparator</code>接口来给自定义范型的集合排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor, getter and setter methods</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person other)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(<span class="built_in">this</span>.age, other.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person p1, Person p2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(p1.getAge(), p2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        Collections.sort(persons, <span class="keyword">new</span> <span class="title class_">AgeComparator</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person p : persons) &#123;</span><br><span class="line">            System.out.println(p.getName() + <span class="string">&quot; &quot;</span> + p.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol start="2">
<li><h1 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h1></li>
</ol>
<h3 id="Greedy-algorithm"><a href="#Greedy-algorithm" class="headerlink" title="Greedy algorithm"></a>Greedy algorithm</h3><ol>
<li><h4 id="455-Assign-Cookies-Easy"><a href="#455-Assign-Cookies-Easy" class="headerlink" title="455. Assign Cookies (Easy)"></a>455. Assign Cookies (Easy)</h4></li>
</ol>
<p>题目描述：每个孩子都有一个满足度 grid，每个饼干都有一个大小 size，只有饼干的大小大于等于一个孩子的满足度，该孩子才会获得满足。求解最多可以获得满足的孩子数量。</p>
<ol>
<li>给一个孩子的饼干应当尽量小并且又能满足该孩子，这样大饼干才能拿来给满足度比较大的孩子。</li>
<li>因为满足度最小的孩子最容易得到满足，所以先满足满足度最小的孩子。</li>
</ol>
<p>在以上的解法中，我们只在每次分配时饼干时选择一种看起来是当前最优的分配方法，但无法保证这种局部最优的分配方法最后能得到全局最优解。我们假设能得到全局最优解，并使用反证法进行证明，即假设存在一种比我们使用的贪心策略更优的最优策略。如果不存在这种最优策略，表示贪心策略就是最优策略，得到的解也就是全局最优解。</p>
<p>证明：假设在某次选择中，贪心策略选择给当前满足度最小的孩子分配第 m 个饼干，第 m 个饼干为可以满足该孩子的最小饼干。假设存在一种最优策略，可以给该孩子分配第 n 个饼干，并且 m &lt; n。我们可以发现，经过这一轮分配，贪心策略分配后剩下的饼干一定有一个比最优策略来得大。因此在后续的分配中，贪心策略一定能满足更多的孩子。也就是说不存在比贪心策略更优的策略，即贪心策略就是最优策略。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(g==<span class="literal">null</span>||s==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      Arrays.sort(g);</span><br><span class="line"></span><br><span class="line">      Arrays.sort(s);</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> gi=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> si=<span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">while</span>(gi&lt;g.length&amp;&amp;si&lt;s.length)&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(s[si]&gt;=g[gi])&#123;</span><br><span class="line"></span><br><span class="line">             gi++;</span><br><span class="line"></span><br><span class="line">             si++;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">else</span> si++;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> gi;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h4 id="435-Non-overlapping-Intervals-Medium"><a href="#435-Non-overlapping-Intervals-Medium" class="headerlink" title="435. Non-overlapping Intervals (Medium)"></a>435. Non-overlapping Intervals (Medium)</h4></li>
</ol>
<p>给定一个区间的集合 intervals ，其中 intervals[i] &#x3D; [starti, endi] 。返回 需要移除区间的最小数量，使剩余区间互不重叠 。</p>
<p>示例 1:</p>
<p>输入: intervals &#x3D; [[1,2],[2,3],[3,4],[1,3]]<br>输出: 1<br>解释: 移除 [1,3] 后，剩下的区间没有重叠。<br>示例 2:</p>
<p>输入: intervals &#x3D; [ [1,2], [1,2], [1,2] ]<br>输出: 2<br>解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。<br>示例 3:</p>
<p>输入: intervals &#x3D; [ [1,2], [2,3] ]<br>输出: 0<br>解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</p>
<p>solution:</p>
<p>先计算最多能组成的不重叠区间个数，然后用区间总个数减去不重叠区间的个数。</p>
<p>在每次选择中，区间的结尾最为重要，选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。</p>
<p>按区间的结尾进行排序，每次选择结尾最小，并且和前一个区间不重叠的区间。结束时间越早越好</p>
<iframe src="//player.bilibili.com/player.html?aid=304892488&bvid=BV1yP411F7EX&cid=884932350&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(intervals, Comparator.comparingInt(o -&gt; o[<span class="number">1</span>]));</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &lt; end) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        end = intervals[i][<span class="number">1</span>];</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intervals.length - cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> (o1[<span class="number">1</span>] &lt; o2[<span class="number">1</span>]) ? -<span class="number">1</span> : ((o1[<span class="number">1</span>] == o2[<span class="number">1</span>]) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//这里是让数组中，各个区间的末尾按照正序也就是升序来排序，所以是用o1[1]&lt;o2[1],也可以用return o1[1]-o2[1],但可能会溢出</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li><h4 id="452-Minimum-Number-of-Arrows-to-Burst-Balloons"><a href="#452-Minimum-Number-of-Arrows-to-Burst-Balloons" class="headerlink" title="452. Minimum Number of Arrows to Burst Balloons"></a>452. Minimum Number of Arrows to Burst Balloons</h4></li>
</ol>
<p>有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组 <code>points</code> ，其中<code>points[i] = [xstart, xend]</code> 表示水平直径在 <code>xstart</code> 和 <code>xend</code>之间的气球。你不知道气球的确切 y 坐标。</p>
<p>一支弓箭可以沿着 x 轴从不同点 <strong>完全垂直</strong> 地射出。在坐标 <code>x</code> 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>x``start</code>，<code>x``end</code>， 且满足 <code>xstart ≤ x ≤ x``end</code>，则该气球会被 <strong>引爆</strong> 。可以射出的弓箭的数量 <strong>没有限制</strong> 。 弓箭一旦被射出之后，可以无限地前进。</p>
<p>给你一个数组 <code>points</code> ，<em>返回引爆所有气球所必须射出的 <strong>最小</strong> 弓箭数</em> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：points = [[10,16],[2,8],[1,6],[7,12]]</span><br><span class="line">输出：2</span><br><span class="line">解释：气球可以用2支箭来爆破:</span><br><span class="line">-在x = 6处射出箭，击破气球[2,8]和[1,6]。</span><br><span class="line">-在x = 11处发射箭，击破气球[10,16]和[7,12]。</span><br></pre></td></tr></table></figure>

<p>该题思路基本和第二题一致，只是要求最多不重叠的区间数，然后射出这么多箭即可。而且注意边界值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">myComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1,<span class="type">int</span>[] o2)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (o1[<span class="number">1</span>] &lt; o2[<span class="number">1</span>]) ? -<span class="number">1</span> : ((o1[<span class="number">1</span>] == o2[<span class="number">1</span>]) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">          <span class="comment">//如果食用return o1[1]-o2[1],可能会出现int越界的问题，所以用比较符号来</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMinArrowShots</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(points==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(points,<span class="keyword">new</span> <span class="title class_">Solution</span>.myComparator());</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> end=points[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;points.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(points[i][<span class="number">0</span>]&lt;=end)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">        end=points[i][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Josh</tag>
      </tags>
  </entry>
  <entry>
    <title>mall developing</title>
    <url>/2023/03/31/mall-developing/</url>
    <content><![CDATA[<p>Bug1: captcha disappearance</p>
<p><a href="https://www.javazxz.com/thread-7116-1-1.html">https://www.javazxz.com/thread-7116-1-1.html</a></p>
<h1 id="Config"><a href="#Config" class="headerlink" title="Config:"></a>Config:</h1><h2 id="1-redis"><a href="#1-redis" class="headerlink" title="1. redis"></a>1. redis</h2><p>Remote configuration:![image-20230403164112175](&#x2F;Users&#x2F;joshua&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230403164112175.png)</p>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>![image-20230403164158804](&#x2F;Users&#x2F;joshua&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230403164158804.png)</p>
<p>![image-20230403164227851](&#x2F;Users&#x2F;joshua&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230403164227851.png)</p>
<p><strong>JDBC</strong></p>
<p>Info:</p>
<p>Url:jdbc:mysql:&#x2F;&#x2F;47.98.63.250:3306&#x2F;mall_pms</p>
<p><em>use the server’s public ip addr</em></p>
<p>DBMS: MySQL (ver. 5.7.41)<br>Case sensitivity: plain&#x3D;exact, delimited&#x3D;exact<br>Driver: MySQL Connector&#x2F;J (ver. mysql-connector-java-8.0.25 (Revision: 08be9e9b4cba6aa115f9b27b215887af40b159e0), JDBC4.2)</p>
<p>Ping: 1 sec, 25 ms<br>SSL: yes</p>
<p><strong>nacos</strong></p>
<p><strong>容器重启数据丢失问题:</strong></p>
<p>解决方法<br>了解上面的介绍后，解决它就很简单了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a 找到我们上次运行的容器<span class="built_in">id</span></span><br><span class="line">docker restart <span class="built_in">id</span> 即可</span><br></pre></td></tr></table></figure>

<p>你没看错就这样就完了。<br>网上有很多说用docker volume实现数据持久化，我觉得是小题大做了。<br>Docker Volume本质上是容器与主机之间共享的目录或者文件，这样Docker Volume中的数据可以在主机和容器中实时同步。</p>
]]></content>
  </entry>
</search>
